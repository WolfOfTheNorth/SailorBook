# SailorBook Natural Language Test Scenarios
# MCP Playwright Integration - YAML-Based Testing Framework

metadata:
  project: SailorBook
  version: "1.0.0"
  test_framework: playwright_mcp
  target_url: "http://localhost:3000"
  browsers: [chromium, firefox, webkit, mobile_chrome, mobile_safari]
  
environments:
  development:
    base_url: "http://localhost:3000"
    timeout: 30000
    slow_mo: 500
    
  staging:
    base_url: "https://staging.sailorbook.app"
    timeout: 30000
    slow_mo: 0
    
  production:
    base_url: "https://sailorbook.app"
    timeout: 15000
    slow_mo: 0

# Core User Journey Tests
test_suites:
  
  # Critical Path: Search and Download
  search_and_download:
    description: "Validate complete search to download user journey"
    priority: critical
    
    scenarios:
      - name: "Successful book search and download"
        description: "When I search for a classic book, I should find it and download it successfully"
        natural_language: |
          I want to search for "Alice's Adventures in Wonderland"
          I should see relevant search results with book covers
          When I click on a book, I should see detailed information
          When I click download, it should handle browser restrictions gracefully
          I should see success guidance for finding my downloaded book
          
        expected_flow:
          - navigate_to: search_tab
          - enter_text: 
              field: search-field
              text: "alice wonderland"
          - trigger_search: enter_key
          - wait_for: search-results
          - click_first: book-card
          - click: download-book-btn
          - verify_visible: download-success-text
          - verify_contains: 
              element: download-success-text
              text: "Download Started Successfully"
              
        success_criteria:
          - no_cors_errors: true
          - download_guidance_shown: true
          - user_friendly_messaging: true
          - selectable_text: true
          
      - name: "Search error handling"
        description: "When search fails, I should see helpful error messages"
        natural_language: |
          I want to search with invalid characters or empty queries
          I should see helpful guidance about valid search terms
          The app should remain responsive and not crash
          
        test_conditions:
          - empty_search: ""
          - special_chars: "!@#$%^&*()"
          - very_long_query: "a" * 200
          
        expected_behavior:
          - graceful_error_handling: true
          - helpful_user_guidance: true
          - app_remains_stable: true

  # Cross-Platform Compatibility
  cross_platform_validation:
    description: "Ensure consistent experience across all platforms"
    priority: high
    
    scenarios:
      - name: "Responsive design validation"
        description: "The app should work well on mobile, tablet, and desktop"
        natural_language: |
          I want to use SailorBook on my phone, tablet, and computer
          The interface should adapt appropriately to each screen size
          All functionality should remain accessible on every device
          Touch targets should be appropriately sized for mobile
          
        viewport_tests:
          - mobile: 375x667
          - tablet: 768x1024  
          - desktop: 1920x1080
          
        validation_criteria:
          - touch_targets_min_44px: true
          - content_readable_all_sizes: true
          - navigation_accessible: true
          - no_horizontal_scrolling: true
          
      - name: "Browser-specific download behavior"
        description: "Downloads should work consistently across different browsers"
        natural_language: |
          I want to download books using Chrome, Firefox, and Safari
          Each browser should handle downloads appropriately
          Success messages should include browser-specific guidance
          No browser should show CORS errors to users
          
        browser_specific_validations:
          chromium:
            download_mechanism: browser_native
            success_guidance: chrome_specific
            error_handling: cors_bypass
          firefox:
            download_mechanism: browser_native
            success_guidance: firefox_specific  
            error_handling: cors_bypass
          webkit:
            download_mechanism: browser_native
            success_guidance: safari_specific
            error_handling: cors_bypass

  # Error Scenarios and Edge Cases
  error_handling_validation:
    description: "Comprehensive error handling and user guidance"
    priority: high
    
    scenarios:
      - name: "Network connectivity issues"
        description: "When network is poor or unavailable, show helpful guidance"
        natural_language: |
          When my internet connection is slow or intermittent
          I should see appropriate loading indicators
          If requests fail, I should get helpful retry options
          The app should degrade gracefully for offline content
          
        network_conditions:
          - slow_3g: 1.6Mbps down, 750kbps up
          - offline: network_disabled
          - intermittent: random_failures_30_percent
          
        expected_behavior:
          - loading_indicators_shown: true
          - retry_options_available: true
          - offline_functionality_preserved: true
          - clear_status_communication: true
          
      - name: "Invalid book URLs and download failures"
        description: "When book downloads fail, provide actionable guidance"
        natural_language: |
          When I try to download a book with a broken or invalid URL
          I should see a clear explanation of what went wrong
          I should get specific steps to resolve the issue
          The error message should be user-friendly, not technical
          
        failure_scenarios:
          - invalid_url: "https://nonexistent.archive.org/book.epub"
          - server_error: mock_500_response
          - corrupted_file: invalid_epub_content
          
        validation_criteria:
          - user_friendly_error_messages: true
          - actionable_resolution_steps: true
          - no_technical_jargon: true
          - retry_mechanisms_available: true

  # Performance and Accessibility
  quality_assurance:
    description: "Performance benchmarks and accessibility compliance"
    priority: medium
    
    scenarios:
      - name: "Performance benchmarks"
        description: "The app should respond quickly to user interactions"
        natural_language: |
          When I interact with the app, responses should be immediate
          Searching should return results within 3 seconds
          Page navigation should take less than 1 second
          Download initiation should be nearly instantaneous
          
        performance_targets:
          page_load: 10000ms
          search_response: 3000ms
          navigation: 1000ms
          download_trigger: 500ms
          ui_interaction: 300ms
          
        measurement_points:
          - app_initialization
          - search_api_response
          - tab_navigation
          - download_button_click
          - success_message_display
          
      - name: "Accessibility compliance"
        description: "All users should be able to access and use SailorBook"
        natural_language: |
          Users with screen readers should be able to navigate effectively
          Keyboard-only users should access all functionality
          Color contrast should meet accessibility standards
          Focus management should be logical and predictable
          
        accessibility_checks:
          - screen_reader_compatibility: wcag_2_1_aa
          - keyboard_navigation: full_functionality
          - color_contrast: 4_5_to_1_minimum
          - focus_management: logical_tab_order
          - aria_labels: comprehensive_coverage

# Test Execution Configuration
execution_config:
  parallel_execution: true
  max_workers: 4
  retry_attempts: 2
  
  screenshot_config:
    on_failure: true
    on_success: false
    full_page: true
    
  video_recording:
    on_failure: true
    quality: medium
    
  trace_collection:
    on_retry: true
    on_failure: true

# MCP-Specific Configuration  
mcp_config:
  natural_language_processing:
    enabled: true
    confidence_threshold: 0.9
    fallback_to_manual: true
    
  autonomous_exploration:
    enabled: true
    duration_minutes: 15
    interaction_depth: 3
    risk_tolerance: medium
    
  bug_discovery:
    enabled: true
    classification_model: severity_impact_matrix
    auto_ticket_creation: false
    human_review_required: true

# Reporting and Analytics
reporting:
  formats: [html, json, junit]
  
  dashboard_metrics:
    - test_execution_time
    - pass_fail_rates
    - bug_discovery_count
    - performance_trend_analysis
    - cross_platform_compatibility
    
  notification_triggers:
    - critical_test_failures
    - performance_regressions
    - new_bugs_discovered
    - accessibility_violations

# Integration Points
integrations:
  ci_cd:
    trigger_on: [pull_request, main_branch_push]
    required_passes: [critical_path_tests]
    optional_passes: [performance_benchmarks]
    
  development_workflow:
    pre_commit: lint_and_unit_tests
    pre_push: integration_tests
    pre_release: full_test_suite
    
  bug_tracking:
    auto_create_tickets: false
    human_review_required: true
    severity_mapping:
      critical: blocks_core_functionality
      high: degrades_user_experience
      medium: minor_inconvenience
      low: cosmetic_improvement